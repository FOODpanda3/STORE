import java.util.ArrayList;
import java.util.List;
import javax.swing.*;

public class JavaApplication14 {

    public static int chooce, quantity = 1;
    public static double total = 0, pay;
    public static int customerCount = 0; 

    public static List<String> orderedItems = new ArrayList<>();
    public static List<Double> orderedPrices = new ArrayList<>();

    public static void menu() {
        String menu = "************ WELCOME TO MY STORE ************\n"
                + "========== MENU ITEMS BELOW ==========\n"
                + "1. French fries..........40.00\n"
                + "2. Salad.............70.00\n"
                + "3. Pizza.............100.00\n"
                + "4. Coffee.............30.00\n"
                + "5. Soda.............30.00\n"
                + "6. EXIT";
        JOptionPane.showMessageDialog(null, menu, "Menu", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void order() {
        customerCount++;
        while (true) {
            menu(); 
            chooce = getUserChoice("Press the coordinate numbers to select items\nWhat do you want to Buy?");
            
            if (chooce == 6) {
                if (total > 0) {
                    int confirmExit = JOptionPane.showConfirmDialog(null, "Order in progress. Do you want to proceed to payment?", "Exit", JOptionPane.YES_NO_OPTION);
                    if (confirmExit == JOptionPane.YES_OPTION) {
                        processPayment();
                    } else {
                        JOptionPane.showMessageDialog(null, "Order canceled.");
                        continue; // Go back to the menu
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Thank you for visiting! Goodbye!");
                    System.exit(0);
                }
            }

            switch (chooce) {
                case 1:
                    processOrder(40.00, "French Fries");
                    break;
                case 2:
                    processOrder(70.00, "Salad");
                    break;
                case 3:
                    processOrder(100.00, "Pizza");
                    break;
                case 4:
                    processOrder(30.00, "Coffee");
                    break;
                case 5:
                    processOrder(30.00, "Soda");
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please try again.");
                    continue; 
            }

            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to buy more?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.NO_OPTION) {
                processPayment();
                int continueShopping = JOptionPane.showConfirmDialog(null, "Do you want to make another purchase?", "Continue Shopping", JOptionPane.YES_NO_OPTION);
                if (continueShopping == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(null, "Thank you for visiting! Goodbye!");
                    System.exit(0);
                } else {
                    total = 0; // Reset total for new session
                    orderedItems.clear();
                    orderedPrices.clear();
                }
            }
        }
    }

    public static void processOrder(double price, String itemName) {
        JOptionPane.showMessageDialog(null, "You chose " + itemName + ".");
        quantity = getQuantity("How many do you want?");

        double itemTotal = quantity * price;
        total += itemTotal;

        orderedItems.add(itemName + " x" + quantity);
        orderedPrices.add(itemTotal);
    }

    public static int getUserChoice(String message) {
        int attempts = 0;
        while (attempts < 3) {
            String inputStr = JOptionPane.showInputDialog(message);
            try {
                return Integer.parseInt(inputStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid number (1-6).");
                attempts++;
            }
        }
        JOptionPane.showMessageDialog(null, "Too many invalid attempts.");
        System.exit(0);
        return -1; 
    }

    public static int getQuantity(String message) {
        int attempts = 0;
        while (attempts < 3) {
            String qtyStr = JOptionPane.showInputDialog(message);
            try {
                return Integer.parseInt(qtyStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid quantity.");
                attempts++;
            }
        }
        JOptionPane.showMessageDialog(null, "Too many invalid attempts.");
        System.exit(0);
        return -1; 
    }

    public static void processPayment() {
        double amount = -1;
        int attempts = 0;
        while (attempts < 3) {
            String payStr = JOptionPane.showInputDialog("Enter Payment");
            try {
                amount = Double.parseDouble(payStr);
                if (amount >= total) {
                    break; 
                } else {
                    JOptionPane.showMessageDialog(null, "Not enough Balance: " + (total - amount));
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid payment amount.");
            }
            attempts++;
        }

        if (amount < total) {
            JOptionPane.showMessageDialog(null, "Too many invalid attempts. ");
            System.exit(0);
        }

        double change = amount - total;
        JOptionPane.showMessageDialog(null, "Total Price: " + total + "\nChange: " + change + "\nPayment Successful!");

        total = 0;
        orderedItems.clear();
        orderedPrices.clear();
    }

    public static void reciteOrder() {
        StringBuilder receipt = new StringBuilder();
        receipt.append("************ RECEIPT ************\n");
        receipt.append("Items Ordered:\n");

        for (int i = 0; i < orderedItems.size(); i++) {
            receipt.append(orderedItems.get(i)).append(" - Total: ").append(orderedPrices.get(i)).append("\n");
        }

        receipt.append("Total Amount: ").append(total).append("\n");
        receipt.append("Thank you for your order!");

        int confirm = JOptionPane.showConfirmDialog(null, receipt.toString() + "\nNumber of Customers: " + customerCount, 
                                                     "Receipt", JOptionPane.OK_CANCEL_OPTION);
        
        if (confirm == JOptionPane.OK_OPTION) {
            JOptionPane.showMessageDialog(null, "Thank you for confirming!");
        } else {
            JOptionPane.showMessageDialog(null, "You chose to cancel the confirmation.");
            System.exit(0); 
        }
    }

    public static void main(String[] args) {
        while (true) {
            order(); 
        }
    }
}
